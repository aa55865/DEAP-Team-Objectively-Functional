import random, math
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
from deap import algorithms, base, tools, creator


# DEAPsolver will have the following inputs:
#   design variables (positional arg, stored in dict)
#       interval
#       bits (optional)
#   objective functions (positional arg, stored in dict)
#       function
#       min or max
#       weight
#   mutation probability (positional arg)
#   crossover probability (positional arg)
#   population size/number of elites (positional arg)
#   number of generations (positional arg)

designVars = {'x1': {'interval': [-1.5,1.5],'type': 'continuous'}, 'x2': {'interval': [-1.5,1.5],'type': 'continuous'}}

gens = 50
popSize = 500
children = 2000
mutPB = 0.05
cxPB = 0.70


def uniform(designVars): #this function determines the values that fill each individual in the intial population
    random.seed(datetime.now())
    individual = [random.uniform(designVars[var]['interval'][0],designVars[var]['interval'][1]) for var in designVars]
    return individual

def cxList(ind1, ind2): #define crossover strategy for lists
    random.seed(datetime.now())
    cxPt = random.randint(0,len(ind1)-1)
    child1 = toolbox.individual()
    child2 = toolbox.individual()
    child1[::] = ind1[0:cxPt]+ind2[cxPt::]
    child2[::] = ind2[0:cxPt]+ind1[cxPt::]
    return child1,child2

def mutList(individual): #define mutation strategy for lists
    random.seed(datetime.now())
    mutPoint = random.randint(0,len(individual)-1)
    counter = 0
    key = None
    for keys in designVars:
        if counter == mutPoint: key = keys
        counter+=1
    individual[mutPoint] = random.uniform(designVars[key]['interval'][0],designVars[key]['interval'][1])
    return individual,

# DEFINE EVALUATION FUNCTION
def funcEval(individual):
    lbda = 0.85
    d  = lbda * math.exp(-(individual[0] - individual[1]) ** 2)
    f1 = 0.5 * (math.sqrt(1 + (individual[0] + individual[1]) ** 2) + math.sqrt(1 + (individual[0] - individual[1]) ** 2) + individual[0] - individual[1]) + d
    f2 = 0.5 * (math.sqrt(1 + (individual[0] + individual[1]) ** 2) + math.sqrt(1 + (individual[0] - individual[1]) ** 2) - individual[0] + individual[1]) + d
    return f1, f2

creator.create("Fitness", base.Fitness, weights=(-1.0,-1.0))
creator.create("Individual", list, fitness=creator.Fitness)
toolbox = base.Toolbox()
toolbox.register("designVar", uniform, designVars)
toolbox.register("individual", tools.initIterate, creator.Individual, toolbox.designVar)
toolbox.register("population", tools.initRepeat, list, toolbox.individual)
toolbox.register("mate", cxList)
toolbox.register("mutate",mutList)
toolbox.register("evaluate", funcEval)
toolbox.register("select", tools.selNSGA2)



def main(): ###THIS FUNCTION RUNS THE ALGORITHM BUILT INTO DEAP
    random.seed(datetime.now())
    NGEN = gens #number of generations
    MU = popSize #number of individuals to select for next generation
    LAMBDA = children #number of children produced at each generation
    CXPB = cxPB #crossover probability
    MUTPB = mutPB #mutation probability

    pop = toolbox.population(n=MU)
    hof = tools.ParetoFront()
    stats = tools.Statistics(lambda ind: ind.fitness.values)
    stats.register("avg", np.mean, axis=0)
    stats.register("std", np.std, axis=0)
    stats.register("min", np.min, axis=0)
    stats.register("max", np.max, axis=0)
    algorithms.eaMuPlusLambda(pop, toolbox, MU, LAMBDA, CXPB, MUTPB, NGEN, stats, halloffame=hof)
    return pop, stats, hof


if __name__ == '__main__':
    stats = main()
    non_dom = tools.sortNondominated(stats[0], k=len(stats[0]), first_front_only=True)[0]
    for ind in non_dom:
        plt.plot(ind.fitness.values[0],ind.fitness.values[1],'bo')
    plt.title('Dent Pareto Front')
    plt.xlabel('f1')
    plt.ylabel('f2')
    plt.show()
